Questions From sqlbolt(https://sqlbolt.com)

Lesson 1 : Select Queries 101
```
1. Find the title of each film
```
SELECT title FROM movies;
```
2.Find the director of each film
```
SELECT director FROM movies;
```
3.Find the title and director of each film
```
SELECT title, director FROM movies;
```
4.Find the title and year of each film
```
SELECT title, year FROM movies;
```
5. Find all the information about each film
```
SELECT * FROM movies;
```
Lesson 2 : Queries with constraints (Pt.1)
```
1.Find the movie with a row id of 6
```
SELECT * FROM movies
WHERE id is 6;
```
2.Find the movies released in the years between 2000 and 2010
```
SELECT * FROM movies
WHERE year BETWEEN 2000 and 2010;
```
3.Find the movies not released in the years between 2000 and 2010
```
SELECT * FROM movies
WHERE year not BETWEEN 2000 and 2010;
```
4.Find the first 5 Pixar movies and their release year
```
SELECT title,year FROM movies
limit 5;
```
Lesson 3 : Queries with Constraints (Pt.2)
```
1.Find all the Toy Story movies
```
SELECT * FROM movies
Where title like "Toy Story%";
```
2.Find all the movies directed by John Lasseter
```
SELECT * FROM movies
Where director is "John Lasseter";
```
3.Find all the movies (and director) not directed by John Lasseter
```
SELECT * FROM movies
Where director is not "John Lasseter";
```
4.Find all the WALL-* movies
```
SELECT * FROM movies
Where title like "WALL-%";
```
Lesson 4: Filtering and sorting Query results
```
1.List all directors of Pixar movies (alphabetically), without duplicates
```
SELECT DISTINCT director FROM movies
ORDER BY director ASC;
```
2.List the last four Pixar movies released (ordered from most recent to least)
```
SELECT * FROM movies
ORDER BY year DESC LIMIT 4;
```
3.List the first five Pixar movies sorted alphabetically
```
SELECT * FROM movies
ORDER BY title ASC LIMIT 5;
```
4.List the next five Pixar movies sorted alphabetically
```
SELECT * FROM movies
ORDER BY title ASC LIMIT 5 OFFSET 5;
````
Review: Simple SELECT Queries
```
1.List all the Canadian cities and their populations
```
SELECT * FROM north_american_cities
Where country is "Canada";
```
2.Order all the cities in the United States by their latitude from north to south
```
SELECT * FROM north_american_cities
Where country is "United States"
Order By latitude DESC;
```
3.List all the cities west of Chicago, ordered from west to east
```
SELECT * FROM north_american_cities
Where longitude < -87.629798
Order by longitude;
```
4.List the two largest cities in Mexico (by population)
```
SELECT * FROM north_american_cities
Where country is "Mexico"
Order by population DESC Limit 2;
```
5.List the third and fourth largest cities (by population) in the United States and their population
```
SELECT * FROM north_american_cities
Where country is "United States"
Order by population DESC Limit 2 OFFSET 2;
```
Lesson 6 : Multi-table queries with JOINs
```
1.Find the domestic and international sales for each movie
```
SELECT title,Domestic_sales,International_sales FROM movies
Left Join Boxoffice
on movies.id = Boxoffice.movie_id;
```
2.Show the sales numbers for each movie that did better internationally rather than domestically
```
SELECT title,domestic_sales,International_sales FROM movies
Left Join Boxoffice
on movies.id=boxoffice.movie_id
Where domestic_sales<international_sales;
```
3.List all the movies by their ratings in descending order
SELECT title, rating
FROM movies
JOIN boxoffice
    ON movies.id = boxoffice.movie_id
ORDER BY rating DESC;
```
Lesson 7 : Outer Joins
```
1.Find the list of all buildings that have employees
```
SELECT Distinct building FROM employees;
```
2.Find the list of all buildings and their capacity
```
SELECT Distinct * FROM buildings;
```
3.List all buildings and the distinct employee roles in each building (including empty buildings)
```
SELECT distinct building_name,role 
FROM buildings
Left join employees
On building_name=Employees.building;
```
Lesson 8 : A short note on nulls
```
1.Find the name and role of all employees who have not been assigned to a building
```
SELECT name,role 
FROM employees
Where building is null;
```
2.Find the names of the buildings that hold no employees
```
SELECT Distinct Building_name 
FROM Buildings
Left join employees
on Building_name = Employees.building
Where employees.building is null;
```
Lesson 9 : Queries with expressions
```
1.List all movies and their combined sales in millions of dollars
```
SELECT title, SUM (domestic_sales + international_sales) / 1000000 AS sales
FROM movies
LEFT JOIN boxoffice
ON movies.id = boxoffice.movie_id
Group by title;
```
2.List all movies and their ratings in percent 
```
SELECT title, (rating*10) 
FROM movies
LEFT JOIN boxoffice
ON movies.id = boxoffice.movie_id;
```
3.List all movies that were released on even number years
```
SELECT title,year FROM movies
where year % 2 = 0;
```
Lesson 10 : Queries with aggregates (Pt.1)
```
1.Find the longest time that an employee has been at the studio
```
SELECT max(Years_employed) FROM employees;
```
2.For each role, find the average number of years employed by employees in that role
```
SELECT role,AVG(Years_employed) FROM employees
Group by role;
```
3.Find the total number of employee years worked in each building
```
SELECT building, Sum(Years_employed) FROM employees
Group by building;
```
Lesson 11: Queries with aggregates (Pt.2)
```
1.Find the number of Artists in the studio (without a HAVING clause)
```
SELECT role,Count() FROM employees
where role is "Artist";
```
2.Find the number of Employees of each role in the studio
```
SELECT role,COUNT() FROM employees
Group by role;
```
3.Find the total number of years employed by all Engineers
```
SELECT role,sum(Years_employed) 
FROM employees
Group by role
Having role = "Engineer";
```
Lesson 12 : Order of execution of a Query
```
1.Find the number of movies each director has directed
```
SELECT director,Count() FROM movies
Group by director;
```
2.Find the total domestic and international sales that can be attributed to each director
```
SELECT director, Sum(domestic_sales+International_sales) as "Total" 
FROM movies
Left Join Boxoffice
on movies.id = Boxoffice.Movie_id
Group by director;
```
